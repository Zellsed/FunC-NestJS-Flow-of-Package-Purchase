#include "imports/stdlib.fc";

(int, cell, int, cell, int, slice, slice) load_data() inline {
    var ds = get_data().begin_parse();

    return (
        ds~load_uint(32),
        ds~load_ref(),    
        ds~load_uint(32),  
        ds~load_ref(), 
        ds~load_uint(32),      
        ds~load_msg_addr(),
        ds~load_msg_addr()
    );
}

() save_data(int id, cell name, int price, cell description, int duration, slice recent_sender, slice owner_address) impure inline {
    set_data(begin_cell()
                .store_uint(id, 32)
                .store_ref(name)    
                .store_uint(price, 32) 
                .store_ref(description) 
                .store_uint(duration, 32)   
                .store_slice(recent_sender)
                .store_slice(owner_address)
                .end_cell()
            );
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);

    var (id, name, price, description, duration, recent_sender, owner_address) = load_data();

    if (op == 1) {

        int _id = in_msg_body~load_uint(32);
        id = _id;

        cell _name = in_msg_body~load_ref();
        name = _name;

        int _price = in_msg_body~load_uint(32);
        price = _price;

        cell _des = in_msg_body~load_ref();
        description = _des;

        int _dur = in_msg_body~load_uint(32);
        duration = _dur;

        save_data(_id, _name, _price, _des, _dur, sender_address, owner_address);
        return();
    }
    if (op == 2) {
        return();
    }
    
    throw(777);
}

( int, cell, int, cell, int, slice, slice) get_contract_storage_data() method_id {
    var (id, name, price, description, duration, recent_sender, owner_address) = load_data();

    return (
        id,
        name,
        price,
        description,
        duration,
        recent_sender,
        owner_address
    );  
}

int balance() method_id {
    var [balance, _] = get_balance();
    return balance;
}